// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "fizz-buzz api",
    "title": "fizz-buzz api",
    "version": "1.0.0"
  },
  "host": "localhost",
  "basePath": "/",
  "paths": {
    "/mon/ping": {
      "get": {
        "tags": [
          "monitoring"
        ],
        "summary": "Health check",
        "responses": {
          "200": {
            "description": "Health OK",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "default": "OK"
                }
              }
            }
          },
          "default": {
            "description": "Error handling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/fizzbuzz": {
      "get": {
        "tags": [
          "fizzbuzz"
        ],
        "summary": "Performs a fizz-buzz",
        "operationId": "fizzbuzz",
        "parameters": [
          {
            "type": "integer",
            "format": "int",
            "description": "number where all of its multiples will be replaced by str1",
            "name": "int1",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int",
            "description": "number where all of its multiples will be replaced by str2",
            "name": "int2",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int",
            "description": "maximum number until the fizz-buzz will be performed",
            "name": "limit",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "string that will replace all multiples of int1",
            "name": "str1",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "string that will replace all multiples of int2",
            "name": "str2",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "fizz buzz string",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error handling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "tags": [
    {
      "description": "fizzbuzz",
      "name": "fizzbuzz"
    },
    {
      "description": "monitoring",
      "name": "monitoring"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "fizz-buzz api",
    "title": "fizz-buzz api",
    "version": "1.0.0"
  },
  "host": "localhost",
  "basePath": "/",
  "paths": {
    "/mon/ping": {
      "get": {
        "tags": [
          "monitoring"
        ],
        "summary": "Health check",
        "responses": {
          "200": {
            "description": "Health OK",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "default": "OK"
                }
              }
            }
          },
          "default": {
            "description": "Error handling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/fizzbuzz": {
      "get": {
        "tags": [
          "fizzbuzz"
        ],
        "summary": "Performs a fizz-buzz",
        "operationId": "fizzbuzz",
        "parameters": [
          {
            "type": "integer",
            "format": "int",
            "description": "number where all of its multiples will be replaced by str1",
            "name": "int1",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int",
            "description": "number where all of its multiples will be replaced by str2",
            "name": "int2",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int",
            "description": "maximum number until the fizz-buzz will be performed",
            "name": "limit",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "string that will replace all multiples of int1",
            "name": "str1",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "string that will replace all multiples of int2",
            "name": "str2",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "fizz buzz string",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error handling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "tags": [
    {
      "description": "fizzbuzz",
      "name": "fizzbuzz"
    },
    {
      "description": "monitoring",
      "name": "monitoring"
    }
  ]
}`))
}
