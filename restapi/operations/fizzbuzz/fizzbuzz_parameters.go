// Code generated by go-swagger; DO NOT EDIT.

package fizzbuzz

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewFizzbuzzParams creates a new FizzbuzzParams object
//
// There are no default values defined in the spec.
func NewFizzbuzzParams() FizzbuzzParams {

	return FizzbuzzParams{}
}

// FizzbuzzParams contains all the bound params for the fizzbuzz operation
// typically these are obtained from a http.Request
//
// swagger:parameters fizzbuzz
type FizzbuzzParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*number where all of its multiples will be replaced by str1
	  Required: true
	  In: query
	*/
	Int1 int64
	/*number where all of its multiples will be replaced by str2
	  Required: true
	  In: query
	*/
	Int2 int64
	/*maximum number until the fizz-buzz will be performed
	  Required: true
	  In: query
	*/
	Limit int64
	/*string that will replace all multiples of int1
	  Required: true
	  In: query
	*/
	Str1 string
	/*string that will replace all multiples of int2
	  Required: true
	  In: query
	*/
	Str2 string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewFizzbuzzParams() beforehand.
func (o *FizzbuzzParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qInt1, qhkInt1, _ := qs.GetOK("int1")
	if err := o.bindInt1(qInt1, qhkInt1, route.Formats); err != nil {
		res = append(res, err)
	}

	qInt2, qhkInt2, _ := qs.GetOK("int2")
	if err := o.bindInt2(qInt2, qhkInt2, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qStr1, qhkStr1, _ := qs.GetOK("str1")
	if err := o.bindStr1(qStr1, qhkStr1, route.Formats); err != nil {
		res = append(res, err)
	}

	qStr2, qhkStr2, _ := qs.GetOK("str2")
	if err := o.bindStr2(qStr2, qhkStr2, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindInt1 binds and validates parameter Int1 from query.
func (o *FizzbuzzParams) bindInt1(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("int1", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("int1", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("int1", "query", "int64", raw)
	}
	o.Int1 = value

	return nil
}

// bindInt2 binds and validates parameter Int2 from query.
func (o *FizzbuzzParams) bindInt2(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("int2", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("int2", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("int2", "query", "int64", raw)
	}
	o.Int2 = value

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *FizzbuzzParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("limit", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("limit", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = value

	return nil
}

// bindStr1 binds and validates parameter Str1 from query.
func (o *FizzbuzzParams) bindStr1(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("str1", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("str1", "query", raw); err != nil {
		return err
	}
	o.Str1 = raw

	return nil
}

// bindStr2 binds and validates parameter Str2 from query.
func (o *FizzbuzzParams) bindStr2(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("str2", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("str2", "query", raw); err != nil {
		return err
	}
	o.Str2 = raw

	return nil
}
