// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MostUsedRequest most used request
//
// swagger:model MostUsedRequest
type MostUsedRequest struct {

	// hits
	// Required: true
	Hits *int64 `json:"hits"`

	// int1
	// Required: true
	Int1 *int64 `json:"int1"`

	// int2
	// Required: true
	Int2 *int64 `json:"int2"`

	// limit
	// Required: true
	Limit *int64 `json:"limit"`

	// str1
	// Required: true
	Str1 *string `json:"str1"`

	// str2
	// Required: true
	Str2 *string `json:"str2"`
}

// Validate validates this most used request
func (m *MostUsedRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInt1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInt2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStr1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStr2(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MostUsedRequest) validateHits(formats strfmt.Registry) error {

	if err := validate.Required("hits", "body", m.Hits); err != nil {
		return err
	}

	return nil
}

func (m *MostUsedRequest) validateInt1(formats strfmt.Registry) error {

	if err := validate.Required("int1", "body", m.Int1); err != nil {
		return err
	}

	return nil
}

func (m *MostUsedRequest) validateInt2(formats strfmt.Registry) error {

	if err := validate.Required("int2", "body", m.Int2); err != nil {
		return err
	}

	return nil
}

func (m *MostUsedRequest) validateLimit(formats strfmt.Registry) error {

	if err := validate.Required("limit", "body", m.Limit); err != nil {
		return err
	}

	return nil
}

func (m *MostUsedRequest) validateStr1(formats strfmt.Registry) error {

	if err := validate.Required("str1", "body", m.Str1); err != nil {
		return err
	}

	return nil
}

func (m *MostUsedRequest) validateStr2(formats strfmt.Registry) error {

	if err := validate.Required("str2", "body", m.Str2); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this most used request based on context it is used
func (m *MostUsedRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MostUsedRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MostUsedRequest) UnmarshalBinary(b []byte) error {
	var res MostUsedRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
